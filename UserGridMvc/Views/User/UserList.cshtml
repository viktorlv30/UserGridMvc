

@using GridMvc.Html
@using GridMvc.Sorting
@model IEnumerable<UserGridMvc.Models.UserModel>

@{
    ViewBag.Title = "UserList";
    Layout = "~/Views/User/Base.cshtml";
}
<link href="@Url.Content("~/Content/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>

<h2>Users</h2>
@Html.ActionLink("Add New User", "Create", null, new { @class = "btn btn-success" })

@Html.Grid(Model).Columns(columns =>
{
    columns.Add(x => x.Login)
        .Titled("Login")
        .Sortable(true)
        .SortInitialDirection(GridSortDirection.Ascending)
        .Filterable(true);
    columns.Add(x => x.Name).Titled("Full name")
        .Sortable(true)
        .Filterable(true);
    columns.Add(x => x.Email)
        .Titled("User email")
        .Sortable(true);
    columns.Add()
        .Encoded(false)
        .Sanitized(false)
        .SetWidth(30)
        .RenderValueAs(x => @Html.ActionLink("Edit", "Edit", new { id = x.Id }, new { @class = "btn btn-primary" }));
    columns.Add()
        .Encoded(false)
        .Sanitized(false)
        .SetWidth(30)
        .RenderValueAs(x => @Html.ActionLink("Delete", "Delete", new { id = x.Id }, new { @class = "btn btn-danger modal-link" }));
}).WithPaging(5)

@*@using Kendo.Mvc.UI
@using Syncfusion.Mvc.Grid

@(Html.Kendo().Grid<UserGridMvc.Models.UserModel>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.Login);
        columns.Bound(p => p.Name).Width(120);
        columns.Bound(p => p.Email).Width(120);
        columns.Bound(p => p.Phone).Width(120);
        columns.Command(command => { command.Edit(); command.Destroy(); }).Width(250);
    })
    .ToolBar(toolbar => toolbar.Create())
    .Editable(editable => editable.Mode(GridEditMode.PopUp))
    .Pageable()
    .Sortable()
    .Scrollable()
    .HtmlAttributes(new { style = "height:550px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(5)
        .Events(events => events.Error("error_handler"))
        .Model(model => model.Id(p => p.Id))
        .Create(update => update.Action("Create", "User"))
        .Read(read => read.Action("Show", "User"))
        .Update(update => update.Action("Update", "User"))
        .Destroy(update => update.Action("Delete", "User"))
    )
)
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
</script>*@